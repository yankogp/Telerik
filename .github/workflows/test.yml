name: GitHub Actions Demo
run-name: ${{ github.actor }} is testing out GitHub Actions 🚀
on: [push]
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - run: echo "🎉 The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "🐧 This job is now running on a ${{ runner.os }} server hosted by GitHub!"
      - run: echo "🔎 The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."
      - name: Check out repository code
        uses: actions/checkout@v4
      - run: echo "💡 The ${{ github.repository }} repository has been cloned to the runner."
      - run: echo "🖥️ The workflow is now ready to test your code on the runner."
      - name: List files in the repository
        run: |
          ls ${{ github.workspace }}
      - run: echo "🍏 This job's status is ${{ job.status }}."



  name: "Setup editorconfig-checker"
  description: "Downloads the editorconfig-checker binary by version number and adds it to your PATH"
  author: "Kasper Hesthaven"
  branding:
  icon: play
  color: green

  inputs:
   version:
    description: "Version to download, e.g., 2.1.0 or 2.0.4. (default: latest)"
    required: false
   command-name:
    description: "Set editorconfig-checker command name, e.g., 'ec'. (default: editorconfig-checker)"
    required: false
    default: "editorconfig-checker"

runs:
  using: "composite"
  steps:
    - name: Assign latest version if version not provided
      run: |
        if [ -z ${{ inputs.version }} ]; then
            echo "VERSION=$(curl -s "https://api.github.com/repos/editorconfig-checker/editorconfig-checker/releases/latest" --header 'authorization: Bearer ${{ github.token }}' | jq -r .tag_name)" >> $GITHUB_ENV
        else
            echo "VERSION=${{ inputs.version }}" >> $GITHUB_ENV
        fi
      shell: bash

    - name: Assign runner env
      run: |
        if [ ${{ runner.os }} == "Windows" ]; then
            echo "OS=windows" >> $GITHUB_ENV
            echo "EXTENSION=.exe" >> $GITHUB_ENV
            echo "POSIX_PATH=$(echo "/${{ runner.temp }}\ec" | sed -e 's/\\/\//g' -e 's/://' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV
            echo "FINAL_PATH=${{ runner.temp }}\ec" >> $GITHUB_ENV
        else
            echo "OS=$(uname -s | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV
            echo "POSIX_PATH=${{ runner.temp }}/ec" >> $GITHUB_ENV
            echo "FINAL_PATH=${{ runner.temp }}/ec" >> $GITHUB_ENV
        fi
      shell: bash

    - name: Download & add to path
      run: |
        echo "Making $POSIX_PATH and changing into it"
        mkdir -p $POSIX_PATH && cd "$_"
        echo "Downloading editorconfig-checker version $VERSION for $OS-amd64 from https://github.com/editorconfig-checker/editorconfig-checker/releases/download/$VERSION/ec-$OS-amd64$EXTENSION.tar.gz"
        curl -L https://github.com/editorconfig-checker/editorconfig-checker/releases/download/$VERSION/ec-$OS-amd64$EXTENSION.tar.gz | tar zx --strip-components 1
        echo "Renaming ec-$OS-amd64$EXTENSION to ${{ inputs.command-name }}$EXTENSION"
        mv ec-$OS-amd64$EXTENSION ${{ inputs.command-name }}$EXTENSION
        echo "Adding $FINAL_PATH to path"
        echo "$FINAL_PATH" >> $GITHUB_PATH
      shell: bash

 on: pull_request

jobs:
  example:
    runs-on: ubuntu-latest
    name: Executes pylint
    steps:
      - name: Checkout
        uses: actions/checkout@v1

      - name: Lint
        uses: gabriel-milan/action-pylint@v1
        with:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}} # GitHub token
          path: "./*.py" # Glob pattern for files to lint
          fail: true # Fail the action if pylint errors are found
          pr-message: true # Send a PR message if pylint errors are found     


name: Testing with pytest and pytest-cov  
 steps:
- uses: actions/checkout@v4
- name: Set up Python
  uses: actions/setup-python@v4
  with:
    python-version: '3.x'
- name: Install dependencies
  run: |
    python -m pip install --upgrade pip
    pip install -r requirements.txt
- name: Test with pytest
  run: |
    pip install pytest pytest-cov
    pytest tests.py --doctest-modules --junitxml=junit/test-results.xml --cov=com --cov-report=xml --cov-report=html
   

   name: Using Ruff to lint code
   steps:
- uses: actions/checkout@v4
- name: Set up Python
  uses: actions/setup-python@v4
  with:
  
    python-version: '3.x'
- name: Install dependencies
  run: |
    python -m pip install --upgrade pip
    pip install -r requirements.txt
- name: Lint with Ruff
  run: |
    pip install ruff
    ruff --output-format=github .
  continue-on-error: true
